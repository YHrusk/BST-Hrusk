
<div class="flex w-full items-center justify-center">
    <div class="text-center w-96">
        <h4>@currentDate.Year.ToString()</h4>
        <header class="flex flex-row space-x-1.5">
            <button class="border-2 text-2xl text-yellow-500 content-center float-left w-1/4" @onclick="() => ChangeMonth(-1)">←</button>
            <h2 class="uppercase w-1/2">@currentDate.ToString("MMMM")</h2>
            <button class="border-2 text-2xl text-yellow-500 content-center float-right w-1/4" @onclick="() => ChangeMonth(1)">→</button>
        </header>

        <div class="d-grid grid-cols-7">
            <div class="font-semibold uppercase">Mo</div>
            <div class="font-semibold uppercase">Tu</div>
            <div class="font-semibold uppercase">We</div>
            <div class="font-semibold uppercase">Th</div>
            <div class="font-semibold uppercase">Fr</div>
            <div class="font-semibold uppercase">Sa</div>
            <div class="font-semibold uppercase">Su</div>

            @{DateOnly date = firstDayOfMonth;}

            <div  @onclick="@(() => {SelectedDateCallback.InvokeAsync(date); selectedDate=date;})" class="@(selectedDate==date?"border-2 border-solid border-yellow-500":"border-2 border-solid") @classCol">@firstDayOfMonth.Day</div>
            @for (int i = 1; i < daysInMonth; i++)
            {
                DateOnly d = firstDayOfMonth.AddDays(i);
                <div @onclick="@(() => {SelectedDateCallback.InvokeAsync(d); selectedDate=d;})" class="@(selectedDate==d?"border-2 border-solid border-yellow-500":"border-2 border-solid")">@d.Day</div>
            }
        </div>

    </div>

</div>

@code {
    [Parameter] public EventCallback<DateOnly> SelectedDateCallback { get; set; }

    DateOnly currentDate = DateOnly.FromDateTime(DateTime.Now);
    DateOnly selectedDate;

    int daysInMonth;
    int dayOne;
    DateOnly firstDayOfMonth;
    string classCol;

    public CalendarComp()
    {
        ChangeMonth(0);
    }

    void ChangeMonth(int i)
    {
        currentDate = currentDate.AddMonths(i);
        firstDayOfMonth = new DateOnly(currentDate.Year, currentDate.Month, 1);
        daysInMonth = DateTime.DaysInMonth((int)currentDate.Year, (int)currentDate.Month);
        dayOne = ((int)firstDayOfMonth.DayOfWeek + 6) % 7 + 1;
        classCol = dayOne switch { 1 => "col-start-1", 2 => "col-start-2", 3 => "col-start-3", 4 => "col-start-4", 5 => "col-start-5", 6 => "col-start-6", 7 => "col-start-7", _ => ""};
    }

}
